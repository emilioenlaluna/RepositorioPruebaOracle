git diff hash.. sadsda

git diff hash..hash



+ línea agregada
- línea eliminada
- línea modificada (versión antigua)
+ línea modificada (nueva versión)



git tags


git tag -a v0.1.0 -m "Primera version de laa aplicacion"


git push servidorlocal v0.1.0


Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) Ejecuta el comando git log -p para ver, junto a cada commit, los cambios realizados;

2) Ahora ejecuta el comando git log --oneline;

3) Ejecuta el comando git diff {hash del commit de merge con lista} .. {hash del último commit realizado};

4) Realiza algún cambio (pequeño) en index.html;

5) Ejecuta el comando git diff y ve este cambio;

6) Deshaga este último cambio;

7) Ejecute el comando git tag -a v0.1.0 para crear un tag en tu código;

8) Ejecuta el comando git push origin v0.1.0 para enviar este tag a GitHub;

9) Abre la página del repositorio de GitHub que creaste y verifica la pestaña Releases.





Que es posible ver qué cambios se hicieron en cada archivo, con el comando git diff;
Que, al escribir solo git diff, vemos los cambios en nuestros archivos que no se agregaron para commit (con git add);
Que es posible comparar cambios entre dos ramas con git diff <branch1> .. <branch2>
Que es posible comparar los cambios realizados entre un commit y otro, usando el comando git diff <commit1> .. <commit2>;
Que Git nos permite guardar “marcos” de nuestra aplicación, por ejemplo, generando versiones, a través de git tag;
Que el comando git tag -a se usa para generar una nueva tag;
Las Releases de GitHub, que son generadas para cada tag de Git que creamos en nuestro repositorio.


