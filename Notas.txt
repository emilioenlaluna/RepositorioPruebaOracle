Inicialiar repositorio
git init

Track Monitorear archivos rastrear
git add .
git add index.html

Desmonitorear archvis

git rm --cache index.html

Hacer un commit

git commit -m "Cambios XXX"

--Configurar usuario

git config --global user.name "XXX"

git config --global user.email "xxx@xxx.xxx"
--local


HEAD: Estado actual de nuestro código, es decir, donde nos colocó Git
Working tree: Lugar donde los archivos realmente están siendo almacenados
index: Lugar donde Git almacena lo que será commiteado, es decir, la ubicación entre el working tree y el repositorio de Git en sí.



git status -s


Ignorar Archivos

# ignora los archivos terminados en .a
*.a

# pero no lib.a, aun cuando había ignorado los archivos terminados en .a en la línea anterior
!lib.a

# ignora unicamente el archivo TODO de la raiz, no subdir/TODO
/TODO

# ignora todos los archivos del directorio build/
build/

# ignora doc/notes.txt, pero no este: doc/server/arch.txt
doc/*.txt

# ignora todos los archivos .txt del directorio doc/
doc/**/*.txt

git diff

 git diff --staged


  git diff --cached para ver que has preparado hasta ahora (--staged y --cached son sinónimos):

Eliminar archivo  git rm PROJECTS.md


git log
git log --oneline
git log -p
git log -p --max-count=2

-n, --max-count=2
    --skip=2
    --since="1 week ago"
    --until="yesterday"
    --author="Rico"
    --committer="Rico"


    git log master             # branch
git log origin/master      # branch, remote
git log v1.0.0             # tag


Ordering
    --date-order
    --author-date-order
    --topo-order              # "smart" ordering
    --reverse


Pretty

  --pretty="format:%H"

  $ git log   --pretty="format:%H %s"
  
$ git log   --pretty="format:%H %s %ae"

https://devhints.io/git-log




git init --bare


listar los servidores remotos


git remote


 git remote add servidorlocal  C:/Users/emili/Documents/remotogitalura/

git remote add nombre-repositorio camino/del/repositorio


emili@LAPTOP-Q6LOO1V1 MINGW64 ~/Documents/OracleOneGitGitHub (master)
$ git remote
servidorlocal


$ git remote -v
servidorlocal   C:/Users/emili/Documents/remotogitalura/ (fetch)
servidorlocal   C:/Users/emili/Documents/remotogitalura/ (push)



$ git clone /c/Users/emili/Documents/remotogitalura/
$ git clone /c/Users/emili/Documents/remotogitalura/ proyecto



agregar los cambios al servidor 

 git push servidorlocal master
 git push <remote> <rama/branch>


//origin es el nombre que le da git cuando copias un repositorio

renombrar un origin remote

git remote rename origin local
git remote rename local servidorlocal


//////////////////
 extreaer datos del serivore local

git pull servidorlocal master


// Obtener los cambios 


git pull servidorlocal master


//Agregar remote de github

git remote add origin https://github.com/emilioenlaluna/RepositorioPruebaOracle.git
git remote add github 

git push oringin master
git push -u origin master
-u significa que siempre va  a hacer a origin


Crear una nueva rama

git branch titulo

cambiar de rama
git checkout titulo

crear rama y cambiar al mismo tiempo

git checkout -b lista


ver cambios con git log como grafo

git log --graph


agregar los cambios a un rama deben estar commited
git rebase rama

git rebase master



todos los comandos
//////

Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) Ejecute el comando git branch y ve que solo existe la rama master en tu repositorio;

2) Ejecuta el comando git branch titulo e inmediatamente después ejecuta el comando git branch. Ve que se creó una nueva rama;

3) Ahora, para comenzar a trabajar en esta rama, escribe git checkout titulo;

4) Ejecuta git branch nuevamente y verifica que ahora te encuentras en la rama llamada titulo;

5) Cambia el título de la página index.html a "Cursos de DevOps de Alura";

6) Agrega los cambios con git add index.html;

7) Haz el commit con git commit -m "Cambiando el título de la página";

8) Ejecuta el comando git log y verifica el nuevo commit;

9) Cambia el título de la página a "Lista de cursos de DevOps de Alura";

10) Repite los pasos 6 y 7, para agregar un nuevo commit, cambiando el mensaje;

11) Repite el paso 8 para verificar el nuevo commit;

12) Ejecuta el comando git checkout master para volver a la línea de desarrollo master;

13) Ejecuta git log para verificar que los dos últimos commits no estén ahí. Comprueba que el contenido de tu archivo también ha vuelto a su estado original;

14) En la carpeta creada para representar el trabajo de otra persona en la clase anterior:

Ejecuta git checkout -b lista para crear una nueva branch, llamada lista y comienza a trabajar en ella;
Agrega el curso "Kubernetes" a la lista;
Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;
Ejecuta el comando git checkout master para volver a la línea de desarrollo master;
15) Regresa a la carpeta que representa tu propio trabajo;

16) Cambia el nombre del curso de Docker a "Docker: Creando contenedores sin dolor de cabeza";

17) Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;

18) Ejecuta el comando git merge titulo para traer el trabajo realizado en la branch título a la branch master;

19) Ejecuta el comando git log --graph para ver las líneas de desarrollo (branches);

20) Ejecuta git checkout titulo para trabajar en la branch llamada titulo;

21) Cambia el título para que tenga la palabra "Cursos" en mayúscula;

22) Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;

23) Ejecuta el comando git checkout master para volver a la línea de desarrollo master;

24) Ejecuta el comando git rebase titulo;

25) Ejecuta el comando git log y verifica que el commit se agregó antes del commit realizado directamente en la branch master;

26) Ejecuta el comando git push servidorlocal master para enviar tus cambios al repositorio remoto que creamos en la última clase;

27) En la carpeta creada para representar el trabajo de otra persona en la clase anterior:

Ejecuta el comando git pull servidorlocal master para descargar los cambios que ya has realizado;
Ejecuta el comando git checkout lista para continuar trabajando en la lista de cursos;
Cambia el nombre del curso de Docker a "Curso de Docker: Creación de contenedores sin dolor de cabeza";
Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;
Ejecuta el comando git checkout master para volver a la línea de desarrollo master;
Intenta juntar tu trabajo con git merge lista;
Observa que hay conflictos. Corrígelos, dejando solo la línea con el nombre correcto del curso;
Ejecuta el comando git add index.html para informar que los conflictos en este archivo se han solucionado;
Ejecuta el comando git commit para que Git complete el merge;
Ejecuta el comando git push servidorlocal master para enviar tus cambios;
28) Regresa a la carpeta que representa tu propio trabajo;

29) Cambia el nombre del curso de Vagrant a "Vagrant: Gerenciando máquinas virtuales";

30) Repita los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;

31) Intenta ejecutar el comando git push servidorlocal master. Observa la falla;

32) Ejecuta el comando git pull servidorlocal master para traer los cambios de la otra persona;

33) Ahora si, ejecuta el comando git push servidorlocal master para enviar los cambios.

////
